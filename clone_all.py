# Clones a set of of repositories into a directory.

import click

import os
import subprocess


@click.command()
@click.option('--directory', '--dir', '-d', 
    default='submissions', 
    help='Directory in which to place student submissions')
@click.option('--roster', '-r', 
    default='classroom_roster.csv', 
    help='CSV file generated by github classroom')
@click.option('--assignment', '-a', 
    required=True,
    help='Github classroom assignment name')
@click.option('--organization', '--org', '-o', 
    default='MPCS-Algorithms',
    help='Github Organization Name')
def clone_all(directory, roster, assignment, organization):
    if directory[-1:] == '/':
        directory = directory[-1:]

    if not os.path.isdir(directory):
        os.mkdir(directory)

    if directory[-1:] == '/':
        directory = directory[-1:]

    if not os.path.isfile(roster):
        print(f'Error: File {roster} not found. Aborting.')
        return
    
    usernames = []
    with open(roster, 'r') as file:
        for line in file.readlines()[1:]:  # Skip header row.
            github_username = line.strip().split(',')[1].strip('"')
            
            if github_username == '':
                print(f'Note: Found no username for {line.split(",")[0]}')
            else:
                usernames.append(github_username)
    
    if not os.path.isdir(f'{directory}/.anticheat'):
        os.mkdir(f'{directory}/.anticheat')

    with open(f'{directory}/.anticheat/usernames.txt', 'w+') as file:
        for username in usernames:
            p = subprocess.Popen(['git', 'clone', f'git@github.com:{organization}/{assignment}-{username}.git'],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                cwd=directory
            )
            return_code = p.wait()

            if return_code == 0:
                file.write(username + '\n')

            else:
                print(f'Note: Could not find repo for {username}. Maybe they didn\'t do the assignment.')


if __name__=='__main__':
    clone_all()
